'''
//Th√©o C√©sar Zanotto da Silva

Este  programa,  quando  executado,  ir√°  determinar  se  uma  string de
entrada  faz  parte  da  linguagem  ùêø    definida  por  ùêø = {ùë• | ùë• ‚àà
 {ùëé,ùëè}‚àó ùëí ùëêùëéùëëùëé ùëé ùëíùëö ùë• √© ùë†ùëíùëîùë¢ùëñùëëùëú ùëùùëúùëü ùëùùëíùëôùëú ùëöùëíùëõùëúùë† ùëëùëúùëñùë† ùëè} segundo o alfabeto  Œ£={ùëé,ùëè,ùëê}.
O  programa  que  voc√™  desenvolver√°  ir√°  receber  como  entrada um arquivo de texto  (.txt)
contendo v√°rias strings. A primeira linha do arquivo indica quantas strings est√£o no arquivo de texto de
entrada. As linhas subsequentes cont√©m uma string por linha.  A seguir est√° um exemplo das linhas que
podem existir em um arquivo de testes para o programa que voc√™ ir√° desenvolver:
3
abbaba
abababb
bbabbaaab
Neste  exemplo  temos  3  strings  de  entrada.  O  n√∫mero  de  strings em  cada  arquivo  ser√°
representado  por  um  n√∫mero  inteiro  positivo.  A  resposta  do  seu  programa  dever√°  conter  uma, e
somente uma linha de sa√≠da para cada string. Estas linhas conter√£o a string de entrada e o resultado
da valida√ß√£o conforme o formato indicado a seguir:
abbaba: n√£o pertence.
A  sa√≠da  poder√°  ser  enviada  para  um  arquivo  de  textos,  ou  para  o  terminal  padr√£o  e  ser√°
composta de uma linha de sa√≠da por string de entrada. No caso do exemplo, teremos 3 linhas de sa√≠da.
Para que seu programa possa ser testado voc√™ deve criar, no m√≠nimo, tr√™s arquivos de entrada
contendo um n√∫mero diferente de strings diferentes.
'''

print('''Qual arquivo dever√° ser analisado?
[] teste1
[] teste2
[] teste3
[] teste4

    Para utilizar um arquivo diferente, personalize previamente o arquivo vazio teste4 !
 ''')

# Selecting the txt file chosen by the user
opcao = str(input('Nome do arquivo escolhido: '))
arquivo = open(opcao + ".txt", 'r')

# acquiring the first line of the files to get the total number of expressions.
linha = int(arquivo.readline())

# while loop to configurate the Finite State Machine (FSM) to iterate over all the expressions.
while linha > 0:
    aux = []
    frase = arquivo.readline()
    check = True
    # one of the check marks to validate the expression. Initializes with the value True.
    estado = -2
    # initial state of the FSM.

    # Main iteration. The for loop reads character by character of the string.
    # The transitions of FSM are guided by what character is read in the for loop.
    for char in list(frase):

        # initial state
        if estado == -2:
            if char == 'a':
                aux.append(char)
                estado = -1
            if char == 'b':
                aux.append(char)
                estado = 1
            if char == 'c':
                aux.append(char)
                estado = -2

        # second state
        elif estado == -1:
            if char == 'a':
                estado = -1
                aux.append(char)
                check = False
            if char == 'b':
                estado = 0
                aux.append(char)
            if char == 'c':
                aux.append(char)
                estado = -1

        # third state
        elif estado == 0:
            if char == 'a':
                estado = -1
                aux.append(char)
                check = False
            if char == 'b':
                estado = 1
                aux.append(char)
            if char == 'c':
                aux.append(char)
                estado = 0

        # forth state
        elif estado == 1:
            if char == 'a':
                estado = -1
                aux.append(char)
            if char == 'b':
                estado = 1
                aux.append(char)
            if char == 'c':
                aux.append(char)
                estado = 1

    # Decreasing the value of this variable guarantees the correct functioning of the FSM.
    linha -= 1

    # There are two check marks to validate the expression.
    # One: The final state of FSM.
    # Two: The boolean value of the variable check
    # The final state of the FSM must be 1 and the boolean value must be True.
    # This is the only way an expression can be correct.

    # Checking the two conditions
    if check and estado == 1:
        for i in aux:
            print(i, end = '')
        print(': pertence')
    else:
        for i in aux:
            print(i, end = '')
        print(': n√£o pertence')
